function [] = displacement_simulations(pathToParameterFile)
% -------------------------------------------------------------
% displacement_simulations
% function used to simulate the 4D (1D in time 3D in space) displacement
% field in a visecoelastic medium generated by a focused ultrasound forcing 
% function. 
%
% Inputs required are the complex pressure pattern of a focused ultrasound
% transducer. Material properties and other simulation parameters
% are specfied in a parameter file.
%
% Method implemented is the approach by Bercoff et al. Relevant references are:
%
%     1. Bercoff J, Tanter M, Muller M, Fink M. The role of viscosity in the impulse 
%        diffraction field of elastic waves induced by the acoustic radiation force.
%        IEEE Trans. Ultrason. Ferroelectr. Freq. Control 2004;51:1523?1536.

%     2. Hofstetter LW, Parker DL. "Corrections to The Role of Viscosity in the Impulse 
%        Diffraction Field of Elastic Waves Induced by the Acoustic Radiation Force" and 
%        "Supersonic Shear Imaging: A New Technique for Soft Tissue Elasticity Mapping." 
%        IEEE Trans. Ultrason. Ferroelectr. Freq. Control 2020.
%
%     Author: Lorne Hofstetter
%     University of Utah
%     2020
% ---------------------------------------------------------------


    % Get path to simulation parameter file if not supplied
    if nargin < 1
        pathToParameterFile = pick_file();
    elseif ~check_filename_exist(pathToParameterFile)
        disp('Parameter file does not exist. Choose another parameter file.');
        pathToParameterFile = pick_file();
    end
    
    % Load Parameter file
    vsParams = read_displacement_sim_parameter_file(pathToParameterFile);
    
    % Iterating over each simulation parameter
    for j = 1:length(vsParams.cs)
        
        params = get_parameters_from_batch(vsParams, j);
        
        % Generating filename that simulation results are saved to.
        fSuffix = strsplit(params.path_to_HAS_file, '/');
        fSuffix = [fSuffix{end}(1:end-4) '.mat'];
        fileNameSave = ['cs_' num2str(params.cs) '_eta_s_' num2str(params.eta_s) ...
                 '_ntstep_' num2str(params.n_time_steps_ARF_duration), ...
                 '_delT_' num2str(params.delta_t*1000), ...
                 'singular_method_', num2str(params.singularity_method), ...
                 '_terms_', num2str(params.terms), '_',  ...
                 fSuffix];
        
        % load the HAS generated forcing function
        load(params.path_to_HAS_file);
        
        % Adding important values from forcing function data file
        params.voxelSizes = paramscell{7,2}/1000; %[m]
        params.cp = paramscell{13,2}; %[m/s]
        params.rho = paramscell{18,2}; %[kg/m^3]
        params.absorptionCoefficient = paramscell{15,2} * ...
            100 * paramscell{2,2}; % In units of [Np/m]
        
        % If HAS generated forcing function was performed in water, the 
        % absorption coeffieint is 0. Calculated ARFI displacemetn will be
        % 0 if absorption coefficeit is 0. To avoid this case, if the 
        % absorption coeffieint it the forcing function is zero we set 
        % a realistic absorption valute for the ARFI displcaemtn calculation.
        if (params.absorptionCoefficient == 0) 
            params.absorptionCoefficient = 0.43 * ( 100 / (20/log(10)) ) * paramscell{2,2}; % the 0.43 is in dB/(cm*MHz).
            warning(['HAS simulations used medium with 0 absorption (i.e water). For ARF component assuming an absorption value of: ' num2str(params.absorptionCoefficient), ' [Np/m]']);
        end
        
        % Bercoff equations use kinematic viscoisty (i.e. eta_s/rho)
        params.vs = params.eta_s / params.rho;
       
        % ####### Displacement simulations performed here ########
        [u_z, f_z, g_zz] = disp4D_HAS(pout, params); 
       
        % Simple visualization for central slice in z. 
        display_images(u_z, params.delta_t); %Line can be commented out if no display of displacement is desired.

        % saving results to file-
        if ~exist('./results', 'dir')
            mkdir('./results')
        end
        save(['./results/' fileNameSave]', 'u_z', 'f_z', 'g_zz', 'params', 'paramscell', '-v7.3');
    end
end


% ==================== Supporting Functions =======================
% --------------------------------------------------------------------

function [fileExist] = check_filename_exist(pathToParameterFile)
    fileExist = (exist(pathToParameterFile, 'file') == 2);
    disp('File not found...');
end

function [filePath] = pick_file()
    [fileName pathName] = uigetfile('./param_files/*.txt','Select Parameter File to Read');
    filePath = [pathName fileName]; 
end

function [vsParams] = read_displacement_sim_parameter_file(parameterFile)
% -------------------------------------------------------------
% read_displacement_sim_parameter_file
%
% Purpose:
%   Read parameters from text file for bercoff simulations.
%   Parameters not listed here are obtained from HAS simulation file.
%   
%   HAS simulation file already has the following paremeters
%   c_p [m/s] - P-wave speed
%   3D voxel sizes
%   simulation volume
%   Absorption coefficient of medium.
%
% Inputs:
%   parameterFile - path to parameter file
%
% Outputs:
%   vsParams - returns parameters needed to perform simulations
%
 
% ---------------------------------------------------------------

    % Parameters in text file
    paramNames = {'path_to_HAS_file'    % Filename specifying which HAS model to use. (List Only One for Each Simulation File. For all other parameters, listing more than one will do batch simulation of those cases.
        'cs';                           %[m/s] shear wave speed.
        'eta_s';                        %[Pa * s] shear viscosity. Bercoff's vs term is eta_s/1000.
        'delta_t';                      %[s] Simulation time step.
        'max_t';                        %[s] Simulate out to this maximum time.
        'n_time_steps_ARF_duration';    %[#] This parameter * delta_t gives the ARFI duration.
        'singularity_method';            % 1 = Replaces singularity with average value of 3D voxel at r  0, 2 Replaces Gs and Gp singularity with average over 2D voxel at r = 0, Gps singularity pixel set to = 0
        'terms';                        %Specifies which terms of greens function to use 1 <-> Gs, 2 <-> Gp, 4 <-> Gsp (3 <-> Gs and Gp, 7 <-> All, ...)
    }';

    paramValues = {};               %Placeholder

 
    fid = fopen(parameterFile, 'r');

    count = 1;
    row  = fgetl(fid);
    while ischar(row)
        row = strip(row);       %Remove trailing and leading white space.
        %Skip comments
        if length(row) >= 2    
            if strcmp(row(1:2), '//')
                row = fgetl(fid); 
                continue
            end
        end
        
        if count == 1                       %First row is the string containing the HAS file name
            paramValues{count} = row;
        else
            paramValues{count} = str2num(row);
        end
        
        count = count + 1;
        row = fgetl(fid);
        
    end
    
    vsParams = cell2struct(paramValues, paramNames(1:length(paramValues)) ,2);
    fclose(fid);
end

function params = get_parameters_from_batch(vsParams, j)
    params = {};
    params.path_to_HAS_file = vsParams.path_to_HAS_file;
    params.cs = vsParams.cs(j);
    params.eta_s = vsParams.eta_s(j);
    params.delta_t = vsParams.delta_t(j);
    params.max_t = vsParams.max_t(j);
    params.n_time_steps_ARF_duration = vsParams.n_time_steps_ARF_duration(j);
    params.singularity_method = vsParams.singularity_method(j);
    params.terms = vsParams.terms(j);
end

function [] = display_images(u_z, delta_t)
        % function to provide quick visualization of the data
        number_idx = 5;
        time_idx = floor(linspace(2, size(u_z,1), number_idx));
        im_xy = shiftdim(u_z(time_idx,:,:,floor(size(u_z,4)/2)),1);
        
        figure; 
        for k = 1:number_idx
            subplot(1, number_idx,k);
            imagesc(im_xy(:,:,k), [-max(im_xy(:)),max(im_xy(:))]); 
            colormap(gca, 'gray'); axis image;
            ylabel(' <--- x ')
            xlabel('y --->')
            title(['time = ' num2str(delta_t*(time_idx(k)-1)*1000) ' ms'])
            set(gca, 'yTick', [], 'xTick', []);
        end
end



